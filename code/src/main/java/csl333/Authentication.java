/*

Name :- Siddharth Nahar
Entry No :- 2016csb1043
Date :- 22/11/18
Purpose :-

	1. Returns the Gmail Service object for Reader and Writer to Use.
	2. Creates the Authorization Request for Draft access.
*/

package csl333;

/*Important packages for Authorization of Gmail for managing Drafts*/
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.GmailScopes;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.Arrays;
import java.util.List;

public class Authentication{

	private static final String APPLICATION_NAME = "Draft Management API";
    	private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();

	/*Tokens is the directory created in root folder which stores credentials*/
    	private static final String TOKENS_DIRECTORY_PATH = "tokens";
	
	/*
		1. Authorization for Drafts permission given by Gmail Scopes
	  	2. Gmail_Compose scope helps to read ,write draft messages.	
	*/
	private static final List<String> SCOPES = Arrays.asList(GmailScopes.GMAIL_COMPOSE, GmailScopes.GMAIL_READONLY);

	/*This file is generated by enabling Gmail-API page stored in root folder.*/
	private static final String CREDENTIALS_FILE_PATH = "/credentials.json";

	/**
	     * Creates an authorized Credential object.
	     * @param HTTP_TRANSPORT The network HTTP Transport.
	     * @return An authorized Credential object.
	     * @throws IOException If the credentials.json file cannot be found.
	*/

	private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {
	
		/*Get Client Credentials*/
		InputStream in = Authentication.class.getResourceAsStream(CREDENTIALS_FILE_PATH);
		GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));

		/*Build an Authorization request for permission according to Scopes*/
		GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
			HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
			.setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
			.setAccessType("offline")
			.build();

		/*Set the Reciever for most common port and return Credentials Object Created*/
		LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();
		return new AuthorizationCodeInstalledApp(flow, receiver).authorize("user");

	}

	/*This Function returns the Gmail Service Object Requested by Reader and Writer*/
	public static Gmail serviceObject() throws IOException, GeneralSecurityException{

		/*Setting up Gmail Service Object with parameters specified*/
		final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
		Gmail service = new Gmail.Builder(HTTP_TRANSPORT, JSON_FACTORY, getCredentials(HTTP_TRANSPORT))
		        .setApplicationName(APPLICATION_NAME)
		        .build();

		return service;
	}

}
